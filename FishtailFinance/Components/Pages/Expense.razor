@page "/expense"
@using System.Text.Json

<h3>Add Expense</h3>

<NavLink href="/transaction"><button>🔙</button></NavLink>

<EditForm Model="transaction" OnValidSubmit="AddExpense">
    <div class="form-group">
        <label for="amount">Amount:</label>
        <InputNumber @bind-Value="transaction.Amount" id="amount" />
    </div>
    <div class="form-group">
        <label for="date">Date of Transaction:</label>
        <InputDate @bind-Value="transaction.DoT" id="date" />
    </div>
    <div class="form-group">
        <label for="category">Category:</label>
        <InputSelect @bind-Value="transaction.Category" id="category">
            <option value="Grocery">Grocery</option>
            <option value="Furniture">Furniture</option>
            <option value="Others">Others</option>
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="note">Note:</label>
        <InputText @bind-Value="transaction.Note" id="note" />
    </div>
    <button type="submit" class="btn btn-primary">Add Expense</button>
</EditForm>

<h3>Expense History</h3>

@if (transactions != null && transactions.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Amount</th>
                <th>Date</th>
                <th>Category</th>
                <th>Note</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in transactions)
            {
                <tr>
                    <td>@expense.Amount</td>
                    <td>@expense.DoT.ToShortDateString()</td>
                    <td>@expense.Category</td>
                    <td>@expense.Note</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No expenses recorded yet.</p>
}

<h3>Highest Expense: Nrs.@HighestExpenseAmount</h3>
<h3>Lowest Expense: Nrs.@LowestExpenseAmount</h3>

@code {
    // This class represents a single expense transaction
    // with properties for Amount, Date of Transaction (DoT),
    // Category, and a Note
    public class ExpenseTransaction
    {
        public int Amount { get; set; }
        public DateTime DoT { get; set; }
        public string Category { get; set; }
        public string Note { get; set; }
    }

    // This variable holds the currently entered expense data
    private ExpenseTransaction transaction = new ExpenseTransaction();

    // This list stores all the expense transactions loaded from the file
    private List<ExpenseTransaction> transactions = new List<ExpenseTransaction>();

    // These properties store the highest and lowest expense amounts
    public int HighestExpenseAmount { get; set; }
    public int LowestExpenseAmount { get; set; }

    // This method is called when the "Add Expense" button is clicked
    private void AddExpense()
    {
        // Add the current transaction to the list
        transactions.Add(transaction);

        // Clear the form fields for the next entry
        transaction = new ExpenseTransaction();

        // Save the updated list of transactions to the file
        SaveTransactionsToFile();
    }

    // This method saves the list of transactions to a JSON file
    private void SaveTransactionsToFile()
    {
        // Get the path to the "My Documents" folder
        var path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "expenses.json");

        // Serialize the list of transactions to JSON
        var json = JsonSerializer.Serialize(transactions);

        // Write the JSON data to the file
        File.WriteAllText(path, json);
    }

    // This method is called when the component is first initialized
    protected override void OnInitialized()
    {
        // Get the path to the "expenses.json" file
        var path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "expenses.json");

        // Check if the file exists
        if (File.Exists(path))
        {
            // Read the JSON data from the file
            var json = File.ReadAllText(path);

            // Deserialize the JSON data into a list of ExpenseTransaction objects
            transactions = JsonSerializer.Deserialize<List<ExpenseTransaction>>(json) ?? new List<ExpenseTransaction>();
        }

        // Calculate the highest and lowest expense amounts if there are any transactions
        if (transactions.Any())
        {
            HighestExpenseAmount = transactions.Max(t => t.Amount);
            LowestExpenseAmount = transactions.Min(t => t.Amount);
        }
    }
}