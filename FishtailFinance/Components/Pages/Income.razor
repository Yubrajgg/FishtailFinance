@page "/income"
@using System.Linq
@using System.Text.Json

<h1>Add Income</h1>

<NavLink href="/transaction"><button-back>Back</button-back></NavLink>

<EditForm Model="transaction" OnValidSubmit="AddIncome">
    <div class="form-group">
        <label for="amount">Income Amount:</label>
        <InputNumber @bind-Value="transaction.IncomeAmount" placeholder="enter an amount" id="amount" />
    </div>
    <div class="form-group">
        <label for="date">Date of Transaction:</label>
        <InputDate @bind-Value="transaction.DoT" id="date" />
    </div>
    <div class="form-group">
        <label for="category">Category:</label>
        <InputSelect @bind-Value="transaction.Category" id="category">
            <option value="Salary">Salary</option>
            <option value="Business">Business</option>
            <option value="Others">Others</option>
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="tags">Tags:</label>
        <InputSelect @bind-Value="transaction.Tags" id="tags">
            <option value="">Select Tags (Optional)</option>
            <option value="Monthly Salary">Monthly Salary</option>
            <option value="Investment">Investment</option>
            <option value="Gift">Gift</option>
            <option value="Business">Business</option>
            <option value="Others">Others</option>
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="note">Note:</label>
        <InputText @bind-Value="transaction.Note" placeholder="(Optional)" id="note" />
    </div>
    <button type="submit" class="btn btn-primary">Add Income</button>
</EditForm>

<h2>Income History</h2>

<div class="filter-container">
    <label for="tagFilter">Tag:</label>
    <select @bind="tagFilter" id="tagFilter">
        <option value="">All Tags</option>
        @foreach (var tag in transactions.Select(t => t.Tags).Distinct())
        {
            <option value="@tag">@tag</option>
        }
    </select>

    <label for="categoryFilter">Category:</label>
    <select @bind="categoryFilter" id="categoryFilter">
        <option value="">All Categories</option>
        <option value="Salary">Salary</option>
        <option value="Business">Business</option>
        <option value="Others">Others</option>
    </select>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Amount</th>
            <th>Date</th>
            <th>Category</th>
            <th>Tags</th>
            <th>Note</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var income in transactions.Where(t =>
        (string.IsNullOrEmpty(tagFilter) || t.Tags == tagFilter) &&
        (string.IsNullOrEmpty(categoryFilter) || t.Category == categoryFilter)))
        {
            <tr>
                <td>@income.IncomeAmount</td>
                <td>@income.DoT.ToString("yyyy-MM-dd")</td>
                <td>@income.Category</td>
                <td>@income.Tags</td>
                <td>@income.Note</td>
                <td><button-delete @onclick="@(() => DeleteIncome(income))">✖</button-delete></td>
            </tr>
        }
    </tbody>
</table>

<p>Total Income: Nrs. @totalIncome</p>

@code {
    private IncomeTransaction transaction = new IncomeTransaction();
    private List<IncomeTransaction> transactions = new List<IncomeTransaction>();
    private int totalIncome = 0;

    private string tagFilter = "";
    private string categoryFilter = "";

    private void AddIncome()
    {
        transactions.Add(transaction);
        totalIncome += transaction.IncomeAmount;
        transaction = new IncomeTransaction();
        SaveTransactionsToFile();
    }

    private void DeleteIncome(IncomeTransaction incomeToDelete)
    {
        transactions.Remove(incomeToDelete);
        totalIncome -= incomeToDelete.IncomeAmount;
        SaveTransactionsToFile();
    }

    private void SaveTransactionsToFile()
    {
        var path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "transactions.json");
        var json = JsonSerializer.Serialize(transactions);
        File.WriteAllText(path, json);
    }

    protected override void OnInitialized()
    {
        var path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "transactions.json");
        if (File.Exists(path))
        {
            var json = File.ReadAllText(path);
            transactions = JsonSerializer.Deserialize<List<IncomeTransaction>>(json) ?? new List<IncomeTransaction>();

            foreach (var income in transactions)
            {
                totalIncome += income.IncomeAmount;
            }
        }
    }

    public class IncomeTransaction
    {
        public int IncomeAmount { get; set; }
        public DateTime DoT { get; set; }
        public string Category { get; set; }
        public string Tags { get; set; }
        public string Note { get; set; }
    }
}


<style>
    /* General Styles */
    body {
        font-family: sans-serif;
        background-color:#08212D; /* Dark background */
        color: #fff; /* White text color */
    }

    /* Container */
    .container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        border-radius: 5px;
        background-color: #121C21; /* Slightly lighter background for container */
    }

    /* Form Styles */
    .form-group {
        margin-bottom: 15px;
    }

    label {
        display: block;
        margin-bottom: 5px;
		color: #94B2C7;
    }

    input[type="text"],
    input[type="number"],
    select {
        color: #94B2C7;
        width: 100%;
        padding: 10px;
        border: 1px solid #333;
        border-radius: 3px;
        background-color: #263845;
        color: #fff;
    }

    button-back {
        position: fixed;
        top: 10px; /* Adjust top margin as needed */
        right: 10px; /* Adjust right margin as needed */
        background: #08212D;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 3px;
        cursor: pointer;
    }

    button-delete {
        background-color: #1F94E0; 
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 3px;
        cursor: pointer;
    }

    /* Table Styles */
    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    td {
        color: #94B2C7;
        padding: 10px;
        text-align: left;
        border-bottom: 1px solid #333;
    }

    th {
        color: #fff;
        padding: 10px;
        text-align: left;
        border-bottom: 1px solid #333;
        background-color: #303030; /* Header background */
    }

    /* Footer Styles */
    footer {
        text-align: center;
        margin-top: 20px;
        color: #888;
    }

   
</style>
