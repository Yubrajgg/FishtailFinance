@page "/dashboard"

@using System.Text.Json

<NavLink href="/welcome"><button>←</button></NavLink>

<h1>Dashboard 📈</h1>

<h3>Total Balance: Nrs.@TotalBalance.ToString("N2")</h3>
<h3>Total Transactions: @TotalTransactions</h3>

@if (incomeTransactions.Any())
{
        <h3>Highest Income: Nrs.@GetHighestIncome().ToString("N2")</h3>
        <h3>Lowest Income: Nrs.@GetLowestIncome().ToString("N2")</h3>
}

@if (expenseTransactions.Any())
{
        <h3>Highest Expense: Nrs.@GetHighestExpense().ToString("N2")</h3>
        <h3>Lowest Expense: Nrs.@GetLowestExpense().ToString("N2")</h3>
}

@if (debts.Any())
{
        <h3>Highest Debt: Nrs.@GetHighestDebt().ToString("N2")</h3>
        <h3>Lowest Debt: Nrs.@GetLowestDebt().ToString("N2")</h3>
}

<h3>Upcoming Debts:</h3>
<ul>
    @foreach (var debt in debts)
    {
        if (debt.DueDate >= DateTime.Now)
        {
            <li>
                Amount: Nrs.@debt.DebtAmount.ToString("N2")
                | Due Date: @debt.DueDate.ToShortDateString()
                | Creditor: @debt.Creditor
            </li>
        }
    }
</ul>

@code {
    private List<IncomeTransaction> incomeTransactions = new List<IncomeTransaction>();
    private List<ExpenseTransaction> expenseTransactions = new List<ExpenseTransaction>();
    private List<Debt> debts = new List<Debt>();

    private decimal TotalBalance
    {
        get
        {
            decimal totalIncome = 0;
            foreach (var transaction in incomeTransactions)
            {
                totalIncome += transaction.IncomeAmount;
            }

            decimal totalExpenses = 0;
            foreach (var transaction in expenseTransactions)
            {
                totalExpenses += transaction.Amount;
            }

            decimal totalDebts = 0;
            foreach (var debt in debts)
            {
                totalDebts += debt.DebtAmount;
            }

            return totalIncome - totalExpenses + totalDebts;
        }
    }

    private int TotalTransactions
    {
        get
        {
            return incomeTransactions.Count + expenseTransactions.Count;
        }
    }

    private int GetHighestIncome()
    {
        if (incomeTransactions.Count == 0)
        {
            return 0;
        }

        int highestIncome = incomeTransactions[0].IncomeAmount;
        foreach (var transaction in incomeTransactions)
        {
            if (transaction.IncomeAmount > highestIncome)
            {
                highestIncome = transaction.IncomeAmount;
            }
        }
        return highestIncome;
    }

    private int GetLowestIncome()
    {
        if (incomeTransactions.Count == 0)
        {
            return 0;
        }

        int lowestIncome = incomeTransactions[0].IncomeAmount;
        foreach (var transaction in incomeTransactions)
        {
            if (transaction.IncomeAmount < lowestIncome)
            {
                lowestIncome = transaction.IncomeAmount;
            }
        }
        return lowestIncome;
    }

    private int GetHighestExpense()
    {
        if (expenseTransactions.Count == 0)
        {
            return 0;
        }

        int highestExpense = expenseTransactions[0].Amount;
        foreach (var transaction in expenseTransactions)
        {
            if (transaction.Amount > highestExpense)
            {
                highestExpense = transaction.Amount;
            }
        }
        return highestExpense;
    }

    private int GetLowestExpense()
    {
        if (expenseTransactions.Count == 0)
        {
            return 0;
        }

        int lowestExpense = expenseTransactions[0].Amount;
        foreach (var transaction in expenseTransactions)
        {
            if (transaction.Amount < lowestExpense)
            {
                lowestExpense = transaction.Amount;
            }
        }
        return lowestExpense;
    }

    private int GetHighestDebt()
    {
        if (debts.Count == 0)
        {
            return 0;
        }

        int highestDebt = debts[0].DebtAmount;
        foreach (var debt in debts)
        {
            if (debt.DebtAmount > highestDebt)
            {
                highestDebt = debt.DebtAmount;
            }
        }
        return highestDebt;
    }

    private int GetLowestDebt()
    {
        if (debts.Count == 0)
        {
            return 0;
        }

        int lowestDebt = debts[0].DebtAmount;
        foreach (var debt in debts)
        {
            if (debt.DebtAmount < lowestDebt)
            {
                lowestDebt = debt.DebtAmount;
            }
        }
        return lowestDebt;
    }

    protected override void OnInitialized()
    {
        // Load income transactions
        string incomePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "transactions.json");
        if (File.Exists(incomePath))
        {
            string incomeJson = File.ReadAllText(incomePath);
            incomeTransactions = JsonSerializer.Deserialize<List<IncomeTransaction>>(incomeJson) ?? new List<IncomeTransaction>();
        }

        // Load expense transactions
        string expensePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "expenses.json");
        if (File.Exists(expensePath))
        {
            string expenseJson = File.ReadAllText(expensePath);
            expenseTransactions = JsonSerializer.Deserialize<List<ExpenseTransaction>>(expenseJson) ?? new List<ExpenseTransaction>();
        }

        // Load debts
        string debtsPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "debts.json");
        if (File.Exists(debtsPath))
        {
            string debtsJson = File.ReadAllText(debtsPath);
            debts = JsonSerializer.Deserialize<List<Debt>>(debtsJson) ?? new List<Debt>();
        }
    }

    public class IncomeTransaction
    {
        public int IncomeAmount { get; set; }
        public DateTime DoT { get; set; }
        public string Category { get; set; }
        public string Tags { get; set; }
        public string Note { get; set; }
    }

    public class ExpenseTransaction
    {
        public int Amount { get; set; }
        public DateTime DoT { get; set; }
        public string Category { get; set; }
        public string Note { get; set; }
    }

    public class Debt
    {
        public int DebtAmount { get; set; }
        public DateTime DoD { get; set; }
        public string Creditor { get; set; }
        public decimal InterestRate { get; set; }
        public DateTime DueDate { get; set; }
        public string Note { get; set; }
    }
}