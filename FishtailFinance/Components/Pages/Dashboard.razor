@page "/dashboard"

@using System.Text.Json

<NavLink href="/welcome"><button-back>Back</button-back></NavLink>

<h1>Dashboard 📈</h1>

<h3>Total Balance: Nrs. @TotalBalance.ToString("N2")</h3>
<h3>Total Transactions: @TotalTransactions</h3>

@if (incomeTransactions.Any())
{
    <h3>Highest Income: Nrs. @GetHighestIncome().ToString("N2")</h3>
    <h3>Lowest Income: Nrs. @GetLowestIncome().ToString("N2")</h3>
}

@if (expenseTransactions.Any())
{
    <h3>Highest Expense: Nrs. @GetHighestExpense().ToString("N2")</h3>
    <h3>Lowest Expense: Nrs. @GetLowestExpense().ToString("N2")</h3>
}

@if (clearedDebts.Any())
{
    <h1>Cleared Debts:</h1>
    <ul>
        @foreach (var debt in clearedDebts)
        {
            <li>
                Amount: Nrs.@debt.DebtAmount.ToString("N2")
                | Due Date: @debt.DueDate.ToShortDateString()
                | Creditor: @debt.Creditor
            </li>
        }
    </ul>
}

@if (debts.Any())
{
    <h1>Pending Debts:</h1>
    <ul>
        @foreach (var debt in debts)
        {
            @if (debt.DueDate >= DateTime.Now)
            {
                <li>
                    Amount: Nrs. @debt.DebtAmount.ToString("N2")
                    | Due Date: @debt.DueDate.ToShortDateString()
                    | Creditor: @debt.Creditor
                </li>
            }
        }
    </ul>
}

@code {
    private List<IncomeTransaction> incomeTransactions = new List<IncomeTransaction>();
    private List<ExpenseTransaction> expenseTransactions = new List<ExpenseTransaction>();
    private List<Debt> debts = new List<Debt>();
    private List<Debt> clearedDebts = new List<Debt>();

    private decimal TotalBalance
    {
        get
        {
            decimal totalIncome = 0;
            foreach (var transaction in incomeTransactions)
            {
                totalIncome += transaction.IncomeAmount;
            }

            decimal totalExpenses = 0;
            foreach (var transaction in expenseTransactions)
            {
                totalExpenses += transaction.Amount;
            }

            decimal totalDebts = 0;
            foreach (var debt in debts)
            {
                totalDebts += debt.DebtAmount;
            }

            return totalIncome - totalExpenses + totalDebts;
        }
    }

    private int TotalTransactions
    {
        get
        {
            return incomeTransactions.Count + expenseTransactions.Count;
        }
    }

    private int GetHighestIncome()
    {
        if (incomeTransactions.Count == 0)
        {
            return 0;
        }

        int highestIncome = incomeTransactions[0].IncomeAmount;
        foreach (var transaction in incomeTransactions)
        {
            if (transaction.IncomeAmount > highestIncome)
            {
                highestIncome = transaction.IncomeAmount;
            }
        }
        return highestIncome;
    }

    private int GetLowestIncome()
    {
        if (incomeTransactions.Count == 0)
        {
            return 0;
        }

        int lowestIncome = incomeTransactions[0].IncomeAmount;
        foreach (var transaction in incomeTransactions)
        {
            if (transaction.IncomeAmount < lowestIncome)
            {
                lowestIncome = transaction.IncomeAmount;
            }
        }
        return lowestIncome;
    }

    private int GetHighestExpense()
    {
        if (expenseTransactions.Count == 0)
        {
            return 0;
        }

        int highestExpense = expenseTransactions[0].Amount;
        foreach (var transaction in expenseTransactions)
        {
            if (transaction.Amount > highestExpense)
            {
                highestExpense = transaction.Amount;
            }
        }
        return highestExpense;
    }

    private int GetLowestExpense()
    {
        if (expenseTransactions.Count == 0)
        {
            return 0;
        }

        int lowestExpense = expenseTransactions[0].Amount;
        foreach (var transaction in expenseTransactions)
        {
            if (transaction.Amount < lowestExpense)
            {
                lowestExpense = transaction.Amount;
            }
        }
        return lowestExpense;
    }

    protected override void OnInitialized()
    {
        // Load income transactions
        string incomePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "transactions.json");
        if (File.Exists(incomePath))
        {
            string incomeJson = File.ReadAllText(incomePath);
            incomeTransactions = JsonSerializer.Deserialize<List<IncomeTransaction>>(incomeJson) ?? new List<IncomeTransaction>();
        }

        // Load expense transactions
        string expensePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "expenses.json");
        if (File.Exists(expensePath))
        {
            string expenseJson = File.ReadAllText(expensePath);
            expenseTransactions = JsonSerializer.Deserialize<List<ExpenseTransaction>>(expenseJson) ?? new List<ExpenseTransaction>();
        }

        // Load debts
        string debtsPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "debts.json");
        if (File.Exists(debtsPath))
        {
            string debtsJson = File.ReadAllText(debtsPath);
            debts = JsonSerializer.Deserialize<List<Debt>>(debtsJson) ?? new List<Debt>();
        }

        // Load cleared debts
        string clearedDebtsPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "cleared_debts.json");
        if (File.Exists(clearedDebtsPath))
        {
            string clearedDebtsJson = File.ReadAllText(clearedDebtsPath);
            clearedDebts = JsonSerializer.Deserialize<List<Debt>>(clearedDebtsJson) ?? new List<Debt>();
        }
    }

    public class IncomeTransaction
    {
        public int IncomeAmount { get; set; }
        public DateTime DoT { get; set; }
        public string Category { get; set; }
        public string Tags { get; set; }
        public string Note { get; set; }
    }

    public class ExpenseTransaction
    {
        public int Amount { get; set; }
        public DateTime DoT { get; set; }
        public string Category { get; set; }
        public string Note { get; set; }
    }

    public class Debt
    {
        public int DebtAmount { get; set; }
        public DateTime DoD { get; set; }
        public string Creditor { get; set; }
        public decimal InterestRate { get; set; }
        public DateTime DueDate { get; set; }
        public string Note { get; set; }
    }
}

<style>
    body {
        font-family: sans-serif;
        background-color: #08212D;
        color: #fff;
    }

    h1 {
        color: #fff;
    }

    h3 {
        color: #94B2C7;
    }

    ul {
        list-style: none;
        padding: 0;
    }

    li {
        margin-bottom: 5px;
        color: #94B2C7;
    }

    button-back {
        position: fixed;
        top: 10px;
        right: 10px;
        background: #08212D;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 3px; 
    }

</style>